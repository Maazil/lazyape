var globalConnectionToCal;
    //This checks if the site is ready
    $(document).ready(function() {

        //New vue object   
        var app = new Vue({

            //Which html element it is going to keep track at
            el: '#calendar',
            //Data it stores
            data: {
                fullCalendar:null,
                tasks:[],
                task: {
                    id:0,
                    start: '',
                    end: '',
                    title: ''
                },
                modul:""
            },

            methods: {
                TimeEditTest: async function (){
                    var self = this;

                    $('#getTimeEdit').text( "Loading...");
                    $('#getTimeEdit').attr('disabled', true);
                    
                    //Get command for all to the calendarApiController
                    await axios.get('/api/calendar/test/timeedit').then(function(res) {
                        
                        for (var task of res.data) {

                            var found = false;
                            for(var i = 0; i < self.tasks.length; i++) {
                                if(self.tasks[i].type === 2) {
                                    if (self.tasks[i].title === task.title
                                        && self.tasks[i].start === task.start
                                        && self.tasks[i].end === task.end) {

                                        found = true;
                                        break;
                                    }
                                }
                            }
                            
                            if (!found) {

                                //Assign the task if not exist from before
                                self.tasks.push(task);
                                self.fullCalendar.addEvent(task);
                            }
                        }

                        $('#getTimeEdit').text( "Get Task from TimeEdit");
                        $('#getTimeEdit').removeAttr('disabled', false);
                    });
                },
                ReloadAutoGeneratedTasks: async function(){
                    var self = this;

                    $('#getAutoTask').text( "Loading...");
                    $('#getAutoTask').attr('disabled', true);
                    
                    //Get command for all to the calendarApiController
                    await axios.get('/api/calendar/test/auto').then( function(res) {
                        
                        for (var task of res.data) {

                            var found = false;
                            for(var i = 0; i < self.tasks.length; i++) {
                                if(self.tasks[i].type === 1) {
                                    if ( self.tasks[i].start === task.start
                                        && self.tasks[i].end === task.end) {

                                        found = true;
                                        break;
                                    }
                                }
                            }

                            if (!found) {

                                //Assign the task if not exist from before
                                self.tasks.push(task);
                                self.fullCalendar.addEvent(task);
                            }
                        }

                        $('#getAutoTask').text( "Reload Auto Generated tasks");
                        $('#getAutoTask').removeAttr('disabled', false);
                    });
                },
                test: function () {
                    var self = this;

                    // Add event to full Calendar
                    self.fullCalendar.addEvent({
                    });
                    
                    // Render the calendar
                    self.fullCalendar.render();
                },

                // When an event is dragged and dropped
                eventDrop: function(info, event){

                    var self = this;

                    var id = info.event.id;

                    if(!confirm("Are you sure about this change?")){
                        info.revert();
                    } else {
                        // Set database task id to the event id from Fullcalendar
                        //Set task info to a certain format from event info Fullcalendar
                        self.task.id = id;
                        self.task.start = self.getFormat(info.event.start);

                        //If user picks all days end will get undefined need to set end of day
                        if (typeof info.event.end === 'undefined' || info.event.end == null){
                            self.task.end = self.getFormat(new Date(
                                info.event.start.getFullYear(),
                                info.event.start.getMonth(),
                                info.event.start.getDate(),
                                24,
                                info.event.start.getMinutes(),
                                info.event.start.getSeconds(),
                                info.event.start.getMilliseconds()
                            ));
                            
                            alert(self.getFormat(new Date(
                                info.event.start.getFullYear(),
                                info.event.start.getMonth(),
                                info.event.start.getDate(),
                                24,
                                info.event.start.getMinutes(),
                                info.event.start.getSeconds(),
                                info.event.start.getMilliseconds()
                            ))); //set to end of day
                        }
                        else{
                            self.task.end = self.getFormat(info.event.end);
                        }
                        
                        self.task.title = info.event.title;

                        //Update database when event is dropped in Fullcalendar
                        axios.put('/api/calendar/' + id, self.task).then(function (response) {

                            self.fullCalendar.getEventById(info.event.id).remove();
                            self.fullCalendar.addEvent(self.task);

                        }); //Axios PUT

                    }

                },
                
                // Set format on date and time
                getFormat: function (date){
                    
                    let current = date;
                    let formatted = current.getFullYear() + "-";
                    
                    //Month
                    if (current.getMonth()+1 < 10){
                        formatted +=  "0" + (current.getMonth() + 1)  + "-";
                    }
                    else{
                        formatted +=  (current.getMonth() + 1) + "-";
                    }
                    
                    //Date
                    if (current.getDate() < 10){
                        formatted +=  "0" + current.getDate() + "T";
                    }
                    else{
                        formatted +=  current.getDate() + "T";
                    }
                    
                    //Hours
                    if (current.getHours() < 10){
                        formatted +=  "0" + current.getHours() + ":";
                    }
                    else{
                        formatted +=  current.getHours() + ":";
                    }

                    //Min
                    if (current.getMinutes() < 10){
                        formatted +=  "0" + current.getMinutes() + ":";
                    }
                    else{
                        formatted +=  current.getMinutes() + ":";
                    }
                    
                    //Sec
                    if (current.getSeconds() < 10){
                        formatted +=  "0" + current.getSeconds();
                    }
                    else{
                        formatted +=  current.getSeconds();
                    }
                    
                    return formatted;

                },
                
                deleteTask: function(){

                    var self = this;
                    
                    //Get id from the modal
                    var id = $("#id").html();
                    
                    //Get index for current task
                    var currrentTaskIndex = self.tasks.findIndex(w=> w.id == id);
                    
                    //Run the delete request

                    axios.delete('/api/calendar/' + id).then(function() {
                        //Remove current task from Vue
                        self.tasks.splice(currrentTaskIndex, 1);
                        //Remove current task from fullcalender
                        self.fullCalendar.getEventById(id).remove();
                    });
                },
                
                //Edit function for boxes inside the modal
                editBox: function () {
                    
                    // Removes the disabled function on the input boxes
                    $('#title').removeAttr('disabled', false);
                    $('#start').removeAttr('disabled', false);
                    $('#end').removeAttr('disabled', false);
                    $('#saveTask').removeAttr('hidden', false);

                },
                
                // After edit, save the data in modal
                saveTask: function () {
                    
                    var self = this;
                    
                    var id = $('#id').html();
                    
                    // Set task from database equal to event data from modal boxes
                    self.task.id = id;
                    self.task.title = $('#title').val();
                    self.task.start = $('#start').val();
                    self.task.end = $('#end').val();

                    // Put request here, update database
                    axios.put('/api/calendar/' + id, self.task).then(function (response) {
                        
                        self.fullCalendar.getEventById(self.task.id).remove();
                        self.fullCalendar.addEvent(self.task);

                    });
                    
                },
                addTask: function(){
                    var self = this;

                    //Get values from the modal
                    var title= $("#taskTitle").val();
                    var start= $("#taskStart").val();
                    var end= $("#taskEnd").val();
                    var dateStart = new Date(start);
                    var dateEnd = new Date(end);


                    if (!isNaN(dateStart.valueOf())) { // valid?

                        // Check if the end date and time is not sooner or equal to the start time
                        if (dateEnd > dateStart){

                            //Set task start date and, end and title into task
                            self.task.title = title;
                            self.task.start = start;
                            self.task.end = end;

                            //Add the task into our database and into calender
                            axios.post('/api/calendar/', self.task).then(function(response) {
                                self.tasks.push(response.data);
                                self.fullCalendar.addEvent(response.data);
                            });


                        }else {
                            alert("End time cannot be equal or sooner than start time");
                        }


                    } else {
                        alert('Invalid date.');
                    }

                }
            },
            //When creating this object do this, aka constructor
            beforeCreate: function() {
                var self = this;

                //Get command for all to the calendarApiController
                axios.get('/api/calendar').then(function(res) {

                    //Assign the task
                    self.tasks = res.data;

                    // Calendar id to use in \side the div tag 
                    let calendarEl = document.getElementById('calendar');

                    /*
                   A variable created to render the calendar setup
                   Uses the Fullcalendar library
                   Takes first in an id (calendarEl),
                   then the plugins and the rest of the info needed
                   to setup the content inside the calendar

                   */
                     var fullCalendar = new FullCalendar.Calendar(calendarEl,{
                         height: "parent",
                         //Here is where we add the plugins for the calender
                         plugins: ['interaction', 'dayGrid', 'timeGrid' , 'bootstrap' ],
                         //The default view we want to show to the usere
                         defaultView: 'timeGridWeek',
                         
                         droppable: true,  //Droppable from drag

                         editable: true,   //Editable

                         eventLimit: true, // allow "more" link when too many events

                         themeSystem: 'bootstrap', //Add bootstrap
                         allDaySlot: false,
                         
                         
                         //Here is where we add what we want to have in the header
                         header: {
                             left: 'prev,next, today',
                             center: 'addEventButton',
                             right: 'dayGridMonth,timeGridWeek,timeGridDay'
                         },
                         //Here we make our own buttons
                         customButtons: {
                             //Button for adding a task
                             addEventButton: {
                                 text: 'Add Event...',
                                 //Here you add the module for adding new task.
                                 click: function() {

                                     $('#addTaskModal').modal('show');
                                     // Put request here, update database when tasks are dragged
                                     /*
                                     
                                     if(self.task.start !== date){

                                         axios.put('/api/calendar', self.task).then(function (response) {
                                             self.tasks.push(response.data);
                                         })
                                         
                                     } // IF statement 
                                     
                                     */
                                 } // Click function
                             } // Add event Button
                         },
                         eventDrop: function (info, event) {
                             self.eventDrop(info, event);
                         },
                         //Events are store in here
                         events: [
                         ],
                         select: function(start, end){
                            // $('.modal').modal('show');
                         },
                         
                         // Modal pop-up when an event is clicked
                         eventClick: function (info, element) {
                             
                             let i_d = $('#id');
                             let ti = $('#title');
                             let sta = $('#start');
                             let end = $('#end');

                             $('#showTask').modal('show');
                             
                             //Get id from event
                             i_d.html(info.event.id);
                             
                             // Get title from event
                             ti.val(info.event.title);
                             //alert(info.event.title);
                             
                             // ------- Get the event start time ------- //
                             sta.val(self.getFormat(info.event.start));

                             // ------- Get the event end time ------- //
                             end.val(self.getFormat(info.event.end));
                             
                             // Set text boxes as disabled when not in edit mode
                             // Also hide the save button -------- || ----------
                             ti.attr('disabled', true);
                             sta.attr('disabled', true);
                             end.attr('disabled', true);
                             $('#saveTask').attr('hidden', true);
                             
                         }
                     });
                     
                    // Set variable fullCalendar from constructor to fullCalendar in data storage
                    self.fullCalendar = fullCalendar;
                    globalConnectionToCal = fullCalendar;

                    //Here it take the task it get from the API on the get request and put them in to the calendar.
                    for (var task of self.tasks) {

                        if(task.start != null || task.title != null){

                            //Remove clutter on the date and time string
                            task.start = task.start.slice(0, 19);
                            task.end = task.end.slice(0, 19);

                            //Add the task to the calendar
                            self.fullCalendar.addEvent({
                                id: task.id,
                                start: task.start,
                                end: task.end,
                                title: task.title
                            });
                        }
                    }
                    
                    //Render the calendar now that it is done.
                    self.fullCalendar.render();
                    
                    //Sends a event based that it is done with the calendar setup
                    var event = new CustomEvent("doneWithCalSetup", { "detail": "Calendar is done with setting up." });
                    document.dispatchEvent(event);
                    
                }); // Axios get request
            } // before create function
        }); // new app = vue
    });  // Document ready